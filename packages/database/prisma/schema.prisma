datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum MealCategory {
  FISK
  VEGETAR
  KYLLING
  STORFE
  ANNET
}

model Recipe {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @unique @db.Citext
  description   String?        @db.Text
  category      MealCategory
  everydayScore Int
  healthScore   Int
  lastUsed      DateTime?
  usageCount    Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  ingredients RecipeIngredient[]
  weekEntries WeekPlanEntry[]

  @@index([category])
  @@index([lastUsed])
}

model Ingredient {
  id   String  @id @default(uuid()) @db.Uuid
  name String  @unique @db.Citext
  unit String? @db.VarChar(32)
  isPantryItem Boolean @default(false)

  recipes RecipeIngredient[]
}

model RecipeIngredient {
  recipeId     String @db.Uuid
  ingredientId String @db.Uuid

  quantity Decimal? @db.Decimal(12, 2)
  notes    String?  @db.Text

  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([recipeId, ingredientId])
}

model WeekPlan {
  id          String   @id @default(uuid()) @db.Uuid
  weekStart   DateTime @unique
  weekIndexId String?  @unique @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  entries   WeekPlanEntry[]
  weekIndex WeekIndex?      @relation(fields: [weekIndexId], references: [id], onDelete: Cascade)
}

model WeekIndex {
  id        String   @id @default(uuid()) @db.Uuid
  weekStart DateTime @unique
  createdAt DateTime @default(now())

  plan WeekPlan?
}

model WeekPlanEntry {
  id         String @id @default(uuid()) @db.Uuid
  weekPlanId String @db.Uuid
  dayIndex   Int
  recipeId   String @db.Uuid

  weekPlan WeekPlan @relation(fields: [weekPlanId], references: [id], onDelete: Cascade)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([weekPlanId, dayIndex])
}

model ShoppingState {
  id           String   @id @default(uuid()) @db.Uuid
  weekStart    DateTime
  ingredientId String @db.Uuid
  unit         String? @db.VarChar(32)
  checked      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([weekStart, ingredientId, unit])
  @@index([weekStart])
}

// Catalog of user-added extra shopping items (not tied to recipes)
model ExtraItemCatalog {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.Citext
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  extras ExtraShoppingItem[]
}

// Extra shopping items added for specific weeks
model ExtraShoppingItem {
  id            String   @id @default(uuid()) @db.Uuid
  weekStart     DateTime
  catalogItemId String   @db.Uuid
  checked       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  catalogItem ExtraItemCatalog @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)

  @@unique([weekStart, catalogItemId])
  @@index([weekStart])
}
